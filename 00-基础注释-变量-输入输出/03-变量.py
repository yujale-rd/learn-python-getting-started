# 关键字（keywords）
"""
关键字是由变成语言系统预定义的、具有特定功能或含义的字符组合，通常是保留字，不能被当做标识符，关键字在编译或解释过程中有着特定的作用，赋予语言的核心语法结构

关键字的作用包括：
- 定义条件语句（如 if, else, elif）
- 控制循环（如 for, while）
- 声明函数和类（如 def, class）
- 管理逻辑操作和异常处理（如 try, except, finally）
- 打印控制台等（print）
"""

# 标识符(Identifiers)

"""
标识符是程序员自己定义的、用户表示变量、函数、类、模块等名称的字符组合。标识符是代码的核心组成部分，具有一定的功能和含义

标识符命名规则
- 组成元素：标识符只能由字母（a-z 或 A-Z）、数字（0-9）和下划线（_）组成。
- 首字母限制：标识符的首字母不能是数字，即不能以数字开头。
- 关键字限制：标识符不能与 Python 的关键字相同（如 if, for, class 等），否则会引发语法错误。
- 大小写敏感：Python 区分大小写，因此 myVar 和 myvar 是两个不同的标识符。	

常见应用场景

- 变量名：用于命名变量，如 age, total_price, is_valid。
- 函数名：用于命名函数，如 get_data(), calculate_total(), print_message()。
- 类名：用于命名类，通常使用大驼峰命名法，如 UserProfile, ProductManager。
- 模块名：用于命名模块文件，通常为小写字母和下划线组合，如 user_auth.py, data_processor.py。

注意：

- 标识符命名的推荐风格：Python 社区推荐遵循 PEP 8 风格指南。例如：
- 变量和函数名应使用小写字母，并以 _ 分隔词（如 total_amount）。
- 类名应使用大驼峰命名法（如 PersonProfile）。

"""

# 变量（Variables）

"""
变量是存储数据的命名容器，其值可以再程序执行过程中发生变化，python 是动态类型语言，因此变量无需声明类型，直接通过赋值操作即可定义变量

变量的特性：

- 变量必须在赋值后才能使用，未赋值的变量会引发 NameError 错误。
- Python 是动态类型语言，变量的类型可以在运行时自动推断并改变。
"""

age = 25
name = "Alice"
is_active = True

x = 10       # 整数变量
x = "hello"  # 变量类型可以改变，现在 x 是字符串
print(x)

# 常量(Constants)

"""
常来那个是程序中不变的量，通常保持固定的值，不能在运行时修改，尽管 Python 没有原生支持常量的语法（不像其他语言有 const 关键字），但常量通常约定使用全大写字母命名，以区分它们与变量。
常量的特性：

- 常量的值在程序执行过程中不应被修改。
- Python 本身并不强制限制常量的值不变，然而这是一个约定俗成的规则。

使用场景： 常量通常用于表示那些在整个程序生命周期内不会改变的值，如数学常量、配置信息等。
"""

PI = 3.14159
MAX_CONNECTIONS = 100
