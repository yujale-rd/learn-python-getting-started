# 数据类型查看的函数：type()

# python 中提供 type 函数方法进行查看变量的类型。

# python 提供多种内置数据类型，主要分为以下两类：
# 基本数据类型，int、float、bool
# 容器类型  str、list、tuple、set、dict

# 基本数据类型

# 整型（int）
# 整型用于表示整数，既可以是正数、也可以是负数，范围几乎没有限制

int1 = 12
print(f"变量 int1 的值为 {int1}，类型为 {type(int1)}")  # 输出: <class 'int'>

# 浮点型（float）
# 浮点型表示带小数点的实数，但精度有限。计算时可能会出现舍入误差，这点需要注意。
float1 = 12.1
print(f"变量 float1 的值为 {float1}，类型为 {type(float1)}")  # 输出: <class 'float'>

# 布尔型（bool）
# 布尔型表示真假值，取值为 True 或 False。布尔型本质上是整数，True 相当于 1，False 相当于 0。
bool1 = True
print(f"变量 bool1 的值为 {bool1}，类型为 {type(bool1)}")  # 输出: <class 'bool'>


# 容器类型
# 字符串（str）
# 字符串用于表示文本数据，是不可变类型，意味着字符串一旦创建就不能修改。字符串可以用单引号或双引号表示，表示多行字符串时使用三引号。

str1 = 'hello Python'
print(f"变量 str1 的值为 '{str1}'，类型为 {type(str1)}")  # 输出: <class 'str'>

# 元组（tuple）
# 元组是不可变的序列类型，元组中的元素一旦定义便不可修改，适合用于存储不需要改变的元素。
tuple1 = (1, 2, 3, 4)
print(f"变量 tuple1 的值为 {tuple1}，类型为 {type(tuple1)}")  # 输出: <class 'tuple'>

# 列表（list）
# 列表是一种可变的序列类型，允许对元素进行增删改查操作。列表中的元素可以是不同类型。
list1 = [1, 2, 3, 4]
print(f"变量 list1 的值为 {list1}，类型为 {type(list1)}")  # 输出: <class 'list'>

# 集合（set）
# 集合是无序且元素唯一的容器类型，常用于去除重复项或进行集合运算。集合中的元素不允许重复，重复的元素会被自动去除。

set1 = {1, 2, 3, 4, 4}
print(f"变量 set1 的值为 {set1}，类型为 {type(set1)}")  # 输出: <class 'set'>，值为 {1, 2, 3, 4}

# 字典（dict）
# 字典是一种键值对（key-value）的映射，键必须是不可变类型，值可以是任意类型。字典常用于快速查找，通过键访问相应的值。

dict1 = {'name': 'xiao_ming', 'age': 18}
print(f"变量 dict1 的值为 {dict1}，类型为 {type(dict1)}")  # 输出: <class 'dict'>

print("======================")

# 动态类型

# Python 是动态类型语言，即变量的类型由赋值决定，变量可以在运行过程中改变类型。动态类型的灵活性使得代码更为简洁，但也可能导致意外的类型错误。

"""
Python 动态类型的优缺点

优点：

- 灵活性：允许变量的类型根据赋值动态变化，不需要事先声明类型。
- 代码简洁：不用像静态语言那样在声明变量时指定类型，适合快速原型开发。
- 自动类型推断：赋值时 Python 会自动推断变量类型，减少手动声明的工作量。

缺点：

- 类型错误风险：由于变量类型可以随时变化，可能会引发类型错误。例如，将字符串与数字混合使用时，可能导致运行时错误。
- 性能问题：由于类型在运行时确定，运行时可能需要进行更多的检查，可能会影响性能。
- 大型项目中的复杂性：在大型项目中，过度依赖动态类型可能引发不可预见的错误，增加代码的维护成本。
"""

a = 12  # 整型
print(f"变量 a 的初始值为 {a}，类型为 {type(a)}")  # 输出: <class 'int'>

a = 'str'  # 字符串类型
print(f"变量 a 的新值为 '{a}'，类型为 {type(a)}")  # 输出: <class 'str'>

a = '12'  # 虽然内容是数字，但类型仍然是字符串
print(f"变量 a 的值为 '{a}'，类型为 {type(a)}")  # 输出: <class 'str'>

a = True  # 布尔类型
print(f"变量 a 的值为 {a}，类型为 {type(a)}")  # 输出: <class 'bool'>

a = 13.4  # 浮点类型
print(f"变量 a 的值为 {a}，类型为 {type(a)}")  # 输出: <class 'float'>
