# 死循环是指循环没有结束条件，或循环条件永远为 True，导致循环体不断执行，无法终止。常见于错误的逻辑设计，或者有意为之，比如服务器一直保持监听状态。

# 在 Python 中，使用 while True: 是创建死循环的典型方法。除非显式地使用 break 退出循环，否则程序将一直运行。

# 简单死循环

while True:
    print("这是一条永远运行的循环")

# 这个例子会不断输出 这是一条永远运行的循环，程序将永不停止，除非手动中断（如按下 Ctrl+C 终止程序）。


# 带 break 的死循环
# 有时我们故意创建一个死循环，并在特定条件下手动退出。可以通过在循环中使用 break 来退出。
while True:
    user_input = input("请输入 'exit' 来退出: ")
    if user_input == 'exit':
        print("退出循环")
        break
# 这个例子中，程序将一直等待用户输入，直到用户输入 exit，才会通过 break 退出死循环。

# 避免逻辑错误导致的死循环
# 在一些情况下，逻辑错误可能会导致程序进入死循环

counter = 0
while counter < 5:
    print(counter)
    # 错误：未增加 counter 的值，导致永远满足条件
# 由于忘记更新 counter 的值，这个循环条件永远为 True，导致无限循环。正确的做法应该是：
counter = 0
while counter < 5:
    print(counter)
    counter += 1  # 正确：更新 counter 的值

"""
常见死循环应用

    服务器监听：很多服务器需要在死循环中等待请求。例如，Web服务器会一直监听端口，直到有客户端发来请求。
    后台服务：很多后台进程需要持续运行，比如任务调度器、消息处理队列等。

如何处理死循环

    终止死循环：可以通过特定条件使用 break 退出死循环，如用户输入、达到一定条件等。
    手动中断：在某些场景下，当我们进入死循环时，可以通过按下 Ctrl+C 来强制终止程序。

"""
