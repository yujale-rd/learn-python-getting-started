# 循环嵌套是指在一个循环体内再包含另一个循环。在 Python 中，常见的循环嵌套方式有 for 循环嵌套和 while 循环嵌套。嵌套循环通常用于处理多维数据结构，如二维数组、矩阵等。

# for 循环嵌套
# 在一个 for 循环中嵌套另一个 for 循环，外层循环执行一次，内层循环要执行完所有的循环。


# 打印乘法表

for i in range(1, 10):      # 外层循环控制行
    for j in range(1, i+1):  # 内层循环控制列
        print(f'{i} * {j} = {i * j}', end='\t')
    print()  # 每一行结束后换行

# 思路解析：
#
# 外层循环控制行数，从 1 到 9。
# 内层循环负责一行中所有列的输出。j 从 1 到 i，这就形成了上三角乘法表的结构。
# print() 用来换行，形成表格的样式。

# while 循环嵌套

# while 循环嵌套的原理与 for 循环嵌套类似，只不过它基于条件判断来决定是否继续循环。
# 打印一个简单的数字矩阵
i = 1
while i <= 3:            # 外层循环控制行数
    j = 1
    while j <= 3:        # 内层循环控制列数
        print(i * j, end=' ')
        j += 1
    print()  # 每行输出后换行
    i += 1
# 思路解析：
# 外层 while 循环控制行数。
# 内层 while 循环控制列数，每次输出一行后通过 print() 换行。

# for 和 while 混合嵌套
# 你可以自由组合 for 和 while 循环，只要符合需求。

# for 循环嵌套 while 循环

for i in range(1, 4):
    j = 1
    while j <= 3:
        print(f'{i} * {j} = {i * j}', end='\t')
        j += 1
    print()

# 嵌套循环的应用

# 例子：遍历二维列表

matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

for row in matrix:             # 遍历每一行
    for element in row:        # 遍历行中的每一个元素
        print(element, end=' ')
    print()                    # 每行输出后换行

# 5. 注意事项
#
# 控制循环次数：嵌套循环中的总执行次数等于内外循环次数的乘积，较深的嵌套可能导致性能问题，要控制好循环的层数和循环次数。
# 退出循环：可以使用 break 退出当前层的循环，使用 continue 跳过当前循环的剩余部分，但不会跳出外层循环。
# 保持代码简洁：过度嵌套会降低代码的可读性，尽量将嵌套控制在 2 到 3 层以内，复杂的情况可以考虑拆分逻辑或使用函数来简化代码。